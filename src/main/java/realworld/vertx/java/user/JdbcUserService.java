package realworld.vertx.java.user;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.UUID;

/**
 * @author Samer Kanjo
 * @since 0.2.0 2/12/18 10:17 PM
 */
public class JdbcUserService implements UserService {

  private static final Logger LOGGER = LoggerFactory.getLogger(JdbcUserService.class);

  private final JDBCClient dbClient;
  private final HashMap<SqlQuery, String> sqlQueries;

  JdbcUserService(JDBCClient dbClient, HashMap<SqlQuery, String> sqlQueries, Handler<AsyncResult<UserService>> readyHandler) {
    this.dbClient = dbClient;
    this.sqlQueries = sqlQueries;

    dbClient.getConnection(ar -> {
      if (ar.failed()) {
        LOGGER.error("Could not open a database connection", ar.cause());
        readyHandler.handle(Future.failedFuture(ar.cause()));
      } else {
        SQLConnection connection = ar.result();
        connection.setOptions(new SQLOptions().setAutoGeneratedKeys(true));
        connection.execute(sqlQueries.get(SqlQuery.CREATE_USER_TABLE), create -> {
          connection.close();
          if (create.failed()) {
            LOGGER.error("Database preparation error ", create.cause());
            readyHandler.handle(Future.failedFuture(create.cause()));
          } else {
            LOGGER.info("Database prepared.");
            readyHandler.handle(Future.succeededFuture(this));
          }
        });
      }
    });
  }

  @Override
  public UserService register(String username, String password, String email, Handler<AsyncResult<Void>> resultHandler) {
    final JsonArray data = new JsonArray().add(username).add(password).add(email);

    dbClient.updateWithParams(sqlQueries.get(SqlQuery.INSERT_USER), data, res -> {
      if (res.succeeded()) {
        resultHandler.handle(Future.succeededFuture());
      } else {
        LOGGER.error("Database query error", res.cause());
        resultHandler.handle(Future.failedFuture(res.cause()));
      }
    });

    return this;
  }

  @Override
  public UserService get(String username, Handler<AsyncResult<JsonObject>> resultHandler) {
    final JsonArray params = new JsonArray().add(username);
    final JsonObject response = new JsonObject();

    dbClient.querySingleWithParams(sqlQueries.get(SqlQuery.SELECT_USER), params, res -> {
      if (res.succeeded()) {
        LOGGER.debug(res.result().encode());

        resultHandler.handle(Future.succeededFuture(response));
      } else {
        LOGGER.error("Database query error", res.cause());
        resultHandler.handle(Future.failedFuture(res.cause()));
      }
    });

    return this;
  }

  @Override
  public UserService all(Handler<AsyncResult<JsonArray>> resultHandler) {
    final JsonArray response = new JsonArray();

    dbClient.query(sqlQueries.get(SqlQuery.SELECT_ALL_USERS), res -> {
      if (res.succeeded()) {
        final ResultSet rs = res.result();
        for (JsonArray line : rs.getResults()) {
          response.add(line);
          System.out.println(line.encode());
        }
        resultHandler.handle(Future.succeededFuture(response));

      } else {
        LOGGER.error("Database query error", res.cause());
        resultHandler.handle(Future.failedFuture(res.cause()));
      }
    });

    return this;
  }

}
